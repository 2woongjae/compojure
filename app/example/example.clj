;; example
;;
;; This is the basic example application that comes with Compojure for
;; demonstration purposes.

(ns example
  (:use (compojure jetty
		   html
                   http
		   validation
		   control)))

(defn template
  "A function to generate the standard outline of a HTML page."
  [title & body]
  (html
    (doctype :html4)
    [:html
      [:head
        [:title title]]
      [:body
        body]]))

(defn validate-example [params]
  (validator
   (validate present? :name params "name must not be blank")
   (validate (max-length 15) :name params "name must be less than 16 characters")
   (validate present? :password params "password must not be blank")
   (validate present? :agree params "must accept the eula")))

(defn example-form []
  (html
    (doctype :xhtml-strict)
    [:html
     [:head
      (include-css "/public/example.css")
      [:title "Form"]]
     [:body 
      [:form {:method "post" :action "/form"}
       (error-summary)
       (decorate-fields error-class
	 [:p (label :name "Username:") " "
	  (text-field :name "Anonymous")]
	       
	 [:p (label :password "Password:") " "
	  (password-field :password)]

	 [:p (label :sex "Sex:") " "
	  (drop-down :sex ["Male" "Female" "Other"])]

	 [:p (label :profile "Profile:") [:br]
	  (text-area {:cols 40 :rows 10} :profile)]

	 [:p (label :agree "Have read usage agreement:") " "
	  (check-box :agree)]
	 [:p (submit-button "New User")
	  (reset-button "Reset Form")])]]]))

(defn welcome-page
  "A basic welcome page."
  []
  (template "Greeting"
    [:h1#title "Welcome to Compojure"]
    [:p.info
      "Compojure is an open source web framework for "
      (link-to "http://clojure.org" "Clojure") "."]
    [:p
      "Here is an " (link-to "/form" "example of a form")
      " generated by Compojure."]))

(deftmpl test-page [foo bar]
  (html 
   [:h1 "Welcome"]
   [:p "The time is " foo]
   [:p "bar is " bar]))

(defservlet example-servlet
  "A Compojure example servlet."
  (GET "/"
    (welcome-page))
  (GET "/form"
       (example-form))
  (POST "/form"
    (with-validated-params params validate-example
      (if (validation-errors?)			    
	(example-form)
	(template "Form Validation" (html [:p "User added"])))))
  (GET "/test"
    (test-page :foo (System/currentTimeMillis), :bar [:div "My Div"]))
  (GET "/public/*"
       (serve-file "public" (route :*)))
  (ANY "*"
       (page-not-found)))

